server:
  port: 8087

spring:
  application:
    name: Multithreaded-Batched-Processing

  datasource:
    url: jdbc:h2:mem:product-csv-db-batch-processing
    driver-class-name: org.h2.Driver
    username: sa
    password:

  h2:
    console:
      enabled: true
      path: /h2-console

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.H2Dialect
    properties:
      hibernate:
        jdbc:
          batch_size: 1000              # ✅ Enables JDBC batching
          batch_versioned_data: true    # ✅ Supports versioned entities in batch
        order_inserts: true             # ✅ Orders INSERTs to optimize batching
        order_updates: true             # ✅ Orders UPDATEs to optimize batching
        generate_statistics: true       # ✅ Enables Session Metrics logs

  batch:
    job:
      # This prevents Spring Batch from running all jobs on application startup.
      # It's essential when you want to trigger jobs via a controller or scheduler.
      enabled: false
    jdbc:
      # This tells Spring Batch to create its metadata tables (BATCH_JOB_INSTANCE, etc.)
      # in the database on startup if they don't exist.
      # Options: ALWAYS, EMBEDDED (default, for H2/HSQL), NEVER
      initialize-schema: ALWAYS

  elasticsearch:
    uris: http://localhost:9200

logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    org.hibernate.engine.jdbc.batch.internal: DEBUG
